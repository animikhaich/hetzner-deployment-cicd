name: Continuous Deployment

on:
    workflow_run:
        workflows: ["Build CI"]
        types:
            - completed

jobs:
    deploy:
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code (to get docker-compose.yml)
              uses: actions/checkout@v4

            - name: Setup SSH
              uses: webfactory/ssh-agent@v0.8.0
              with:
                  ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

            - name: Copy docker-compose.yml to VPS
              run: |
                  ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p ~/app"
                  scp -o StrictHostKeyChecking=no docker-compose.yml \
                    ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/app/docker-compose.yml

            - name: Deploy with Docker Compose
              run: |
                  ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << EOF
                    set -e
                    echo "Logging into GHCR..."
                    echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin || { echo "Docker login failed"; exit 1; }
                    echo "Changing to app directory..."
                    cd ~/app || { echo "Failed to change directory to ~/app"; exit 1; }
                    echo "Pulling latest images..."
                    docker compose pull || { echo "docker compose pull failed"; exit 1; }
                    echo "Starting containers..."
                    docker compose up -d --remove-orphans || { echo "docker compose up failed"; exit 1; }
                    echo "Pruning unused Docker resources..."
                    docker system prune -f || { echo "docker system prune failed"; exit 1; }
                    echo "Deployment completed successfully."
                  EOF

            - name: Validate Containers Are Running
              run: |
                  ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
                    set -e
                    cd ~/app || { echo "ERROR: Failed to change directory to ~/app"; exit 1; }
                    echo "Checking running containers..."
                    running=$(docker compose ps --services --filter "status=running" | wc -l) || { echo "ERROR: Failed to get running containers"; exit 1; }
                    total=$(docker compose ps --services | wc -l) || { echo "ERROR: Failed to get total containers"; exit 1; }
                    echo "Running containers: $running"
                    echo "Total containers: $total"
                    if [ "$running" -eq 0 ]; then
                      echo "ERROR: No containers are running!"
                      docker compose ps || { echo "ERROR: Failed to list containers"; exit 1; }
                      exit 1
                    fi
                    if [ "$running" -lt "$total" ]; then
                      echo "ERROR: Some containers are not running!"
                      docker compose ps || { echo "ERROR: Failed to list containers"; exit 1; }
                      exit 1
                    fi
                    echo "SUCCESS: All containers are running."
                  EOF
